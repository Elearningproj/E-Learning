// <auto-generated />
using System;
using ELearn.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ELearn.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ELearn.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ELearn.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageLink")
                        .HasColumnType("longtext");

                    b.Property<ulong>("IsDeleted")
                        .HasColumnType("bigint unsigned");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("ELearn.Models.Discussion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussion");
                });

            modelBuilder.Entity("ELearn.Models.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<string>("LessonName")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("ELearn.Models.MyCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CartId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("MyCourse");
                });

            modelBuilder.Entity("ELearn.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("ELearn.Models.Reply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<long?>("DiscussionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("ELearn.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_on");

                    b.Property<string>("Dob")
                        .HasColumnType("longtext")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phno")
                        .HasColumnType("longtext")
                        .HasColumnName("phno");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_on");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ELearn.Models.Cart", b =>
                {
                    b.HasOne("ELearn.Models.Course", "Course")
                        .WithMany("Carts")
                        .HasForeignKey("CourseId");

                    b.HasOne("ELearn.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ELearn.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELearn.Models.Course", b =>
                {
                    b.HasOne("ELearn.Models.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELearn.Models.Discussion", b =>
                {
                    b.HasOne("ELearn.Models.Course", "Course")
                        .WithMany("Discussions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearn.Models.User", "User")
                        .WithMany("Discussions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELearn.Models.Lesson", b =>
                {
                    b.HasOne("ELearn.Models.User", "Admin")
                        .WithMany("Lessons")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearn.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ELearn.Models.MyCourse", b =>
                {
                    b.HasOne("ELearn.Models.Cart", "Cart")
                        .WithMany("MyCourses")
                        .HasForeignKey("CartId");

                    b.HasOne("ELearn.Models.User", "User")
                        .WithMany("MyCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELearn.Models.Question", b =>
                {
                    b.HasOne("ELearn.Models.Course", "Course")
                        .WithMany("Questions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ELearn.Models.Reply", b =>
                {
                    b.HasOne("ELearn.Models.Discussion", "Discussion")
                        .WithMany("Replies")
                        .HasForeignKey("DiscussionId");

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("ELearn.Models.Cart", b =>
                {
                    b.Navigation("MyCourses");
                });

            modelBuilder.Entity("ELearn.Models.Course", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Discussions");

                    b.Navigation("Lessons");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ELearn.Models.Discussion", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ELearn.Models.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Courses");

                    b.Navigation("Discussions");

                    b.Navigation("Lessons");

                    b.Navigation("MyCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
